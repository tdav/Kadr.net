//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lcc.RFileClient.srvFileClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageFileInfo", Namespace="http://schemas.datacontract.org/2004/07/Asbt.FileService")]
    [System.SerializableAttribute()]
    public partial class StorageFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CRC32Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDirectoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CRC32 {
            get {
                return this.CRC32Field;
            }
            set {
                if ((object.ReferenceEquals(this.CRC32Field, value) != true)) {
                    this.CRC32Field = value;
                    this.RaisePropertyChanged("CRC32");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDirectory {
            get {
                return this.IsDirectoryField;
            }
            set {
                if ((this.IsDirectoryField.Equals(value) != true)) {
                    this.IsDirectoryField = value;
                    this.RaisePropertyChanged("IsDirectory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TbDivClass", Namespace="http://schemas.datacontract.org/2004/07/Asbt.DataModels")]
    [System.SerializableAttribute()]
    public partial class TbDivClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpOblField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpId {
            get {
                return this.SpIdField;
            }
            set {
                if ((this.SpIdField.Equals(value) != true)) {
                    this.SpIdField = value;
                    this.RaisePropertyChanged("SpId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpName {
            get {
                return this.SpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SpNameField, value) != true)) {
                    this.SpNameField = value;
                    this.RaisePropertyChanged("SpName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpObl {
            get {
                return this.SpOblField;
            }
            set {
                if ((this.SpOblField.Equals(value) != true)) {
                    this.SpOblField = value;
                    this.RaisePropertyChanged("SpObl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpType {
            get {
                return this.SpTypeField;
            }
            set {
                if ((this.SpTypeField.Equals(value) != true)) {
                    this.SpTypeField = value;
                    this.RaisePropertyChanged("SpType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="srvFileClient.IFileTransferService")]
    public interface IFileTransferService {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (Get)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/Get", ReplyAction="http://tempuri.org/IFileTransferService/GetResponse")]
        Lcc.RFileClient.srvFileClient.RemoteFileInfo Get(Lcc.RFileClient.srvFileClient.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/Get", ReplyAction="http://tempuri.org/IFileTransferService/GetResponse")]
        System.IAsyncResult BeginGet(Lcc.RFileClient.srvFileClient.DownloadRequest request, System.AsyncCallback callback, object asyncState);
        
        Lcc.RFileClient.srvFileClient.RemoteFileInfo EndGet(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileInfo) of message RemoteFileInfo does not match the default value (Put)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/Put", ReplyAction="http://tempuri.org/IFileTransferService/PutResponse")]
        Lcc.RFileClient.srvFileClient.RemoteFileCrc32 Put(Lcc.RFileClient.srvFileClient.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/Put", ReplyAction="http://tempuri.org/IFileTransferService/PutResponse")]
        System.IAsyncResult BeginPut(Lcc.RFileClient.srvFileClient.RemoteFileInfo request, System.AsyncCallback callback, object asyncState);
        
        Lcc.RFileClient.srvFileClient.RemoteFileCrc32 EndPut(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation Del is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/Del", ReplyAction="http://tempuri.org/IFileTransferService/DelResponse")]
        Lcc.RFileClient.srvFileClient.DelResponse Del(Lcc.RFileClient.srvFileClient.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/Del", ReplyAction="http://tempuri.org/IFileTransferService/DelResponse")]
        System.IAsyncResult BeginDel(Lcc.RFileClient.srvFileClient.DownloadRequest request, System.AsyncCallback callback, object asyncState);
        
        Lcc.RFileClient.srvFileClient.DelResponse EndDel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/ReName", ReplyAction="http://tempuri.org/IFileTransferService/ReNameResponse")]
        void ReName(string OldFileName, string NewFileName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/ReName", ReplyAction="http://tempuri.org/IFileTransferService/ReNameResponse")]
        System.IAsyncResult BeginReName(string OldFileName, string NewFileName, System.AsyncCallback callback, object asyncState);
        
        void EndReName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/List", ReplyAction="http://tempuri.org/IFileTransferService/ListResponse")]
        Lcc.RFileClient.srvFileClient.StorageFileInfo[] List(string basePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/List", ReplyAction="http://tempuri.org/IFileTransferService/ListResponse")]
        System.IAsyncResult BeginList(string basePath, System.AsyncCallback callback, object asyncState);
        
        Lcc.RFileClient.srvFileClient.StorageFileInfo[] EndList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/CRC32", ReplyAction="http://tempuri.org/IFileTransferService/CRC32Response")]
        string CRC32(string FileName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/CRC32", ReplyAction="http://tempuri.org/IFileTransferService/CRC32Response")]
        System.IAsyncResult BeginCRC32(string FileName, System.AsyncCallback callback, object asyncState);
        
        string EndCRC32(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/UpdateFilesList", ReplyAction="http://tempuri.org/IFileTransferService/UpdateFilesListResponse")]
        Lcc.RFileClient.srvFileClient.StorageFileInfo[] UpdateFilesList(string basePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/UpdateFilesList", ReplyAction="http://tempuri.org/IFileTransferService/UpdateFilesListResponse")]
        System.IAsyncResult BeginUpdateFilesList(string basePath, System.AsyncCallback callback, object asyncState);
        
        Lcc.RFileClient.srvFileClient.StorageFileInfo[] EndUpdateFilesList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/GetDriveInfo", ReplyAction="http://tempuri.org/IFileTransferService/GetDriveInfoResponse")]
        Lcc.RFileClient.srvFileClient.TbDivClass[] GetDriveInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferService/GetDriveInfo", ReplyAction="http://tempuri.org/IFileTransferService/GetDriveInfoResponse")]
        System.IAsyncResult BeginGetDriveInfo(System.AsyncCallback callback, object asyncState);
        
        Lcc.RFileClient.srvFileClient.TbDivClass[] EndGetDriveInfo(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string ToDir;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, string ToDir, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.ToDir = ToDir;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileCrc32", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileCrc32 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Crc32;
        
        public RemoteFileCrc32() {
        }
        
        public RemoteFileCrc32(string Crc32) {
            this.Crc32 = Crc32;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DelResponse {
        
        public DelResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferServiceChannel : Lcc.RFileClient.srvFileClient.IFileTransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Length {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public string ToDir {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public System.IO.Stream FileByteStream {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[2]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Lcc.RFileClient.srvFileClient.StorageFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Lcc.RFileClient.srvFileClient.StorageFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRC32CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CRC32CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateFilesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateFilesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Lcc.RFileClient.srvFileClient.StorageFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Lcc.RFileClient.srvFileClient.StorageFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDriveInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDriveInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Lcc.RFileClient.srvFileClient.TbDivClass[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Lcc.RFileClient.srvFileClient.TbDivClass[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferServiceClient : System.ServiceModel.ClientBase<Lcc.RFileClient.srvFileClient.IFileTransferService>, Lcc.RFileClient.srvFileClient.IFileTransferService {
        
        private BeginOperationDelegate onBeginGetDelegate;
        
        private EndOperationDelegate onEndGetDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPutDelegate;
        
        private EndOperationDelegate onEndPutDelegate;
        
        private System.Threading.SendOrPostCallback onPutCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelDelegate;
        
        private EndOperationDelegate onEndDelDelegate;
        
        private System.Threading.SendOrPostCallback onDelCompletedDelegate;
        
        private BeginOperationDelegate onBeginReNameDelegate;
        
        private EndOperationDelegate onEndReNameDelegate;
        
        private System.Threading.SendOrPostCallback onReNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginListDelegate;
        
        private EndOperationDelegate onEndListDelegate;
        
        private System.Threading.SendOrPostCallback onListCompletedDelegate;
        
        private BeginOperationDelegate onBeginCRC32Delegate;
        
        private EndOperationDelegate onEndCRC32Delegate;
        
        private System.Threading.SendOrPostCallback onCRC32CompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateFilesListDelegate;
        
        private EndOperationDelegate onEndUpdateFilesListDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateFilesListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDriveInfoDelegate;
        
        private EndOperationDelegate onEndGetDriveInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetDriveInfoCompletedDelegate;
        
        public FileTransferServiceClient() {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetCompletedEventArgs> GetCompleted;
        
        public event System.EventHandler<PutCompletedEventArgs> PutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReNameCompleted;
        
        public event System.EventHandler<ListCompletedEventArgs> ListCompleted;
        
        public event System.EventHandler<CRC32CompletedEventArgs> CRC32Completed;
        
        public event System.EventHandler<UpdateFilesListCompletedEventArgs> UpdateFilesListCompleted;
        
        public event System.EventHandler<GetDriveInfoCompletedEventArgs> GetDriveInfoCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Lcc.RFileClient.srvFileClient.RemoteFileInfo Lcc.RFileClient.srvFileClient.IFileTransferService.Get(Lcc.RFileClient.srvFileClient.DownloadRequest request) {
            return base.Channel.Get(request);
        }
        
        public long Get(ref string FileName, out string ToDir, out System.IO.Stream FileByteStream) {
            Lcc.RFileClient.srvFileClient.DownloadRequest inValue = new Lcc.RFileClient.srvFileClient.DownloadRequest();
            inValue.FileName = FileName;
            Lcc.RFileClient.srvFileClient.RemoteFileInfo retVal = ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).Get(inValue);
            FileName = retVal.FileName;
            ToDir = retVal.ToDir;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Lcc.RFileClient.srvFileClient.IFileTransferService.BeginGet(Lcc.RFileClient.srvFileClient.DownloadRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGet(string FileName, System.AsyncCallback callback, object asyncState) {
            Lcc.RFileClient.srvFileClient.DownloadRequest inValue = new Lcc.RFileClient.srvFileClient.DownloadRequest();
            inValue.FileName = FileName;
            return ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).BeginGet(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Lcc.RFileClient.srvFileClient.RemoteFileInfo Lcc.RFileClient.srvFileClient.IFileTransferService.EndGet(System.IAsyncResult result) {
            return base.Channel.EndGet(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGet(System.IAsyncResult result, out long Length, out string ToDir, out System.IO.Stream FileByteStream) {
            Lcc.RFileClient.srvFileClient.RemoteFileInfo retVal = ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).EndGet(result);
            Length = retVal.Length;
            ToDir = retVal.ToDir;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileName;
        }
        
        private System.IAsyncResult OnBeginGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            return this.BeginGet(FileName, callback, asyncState);
        }
        
        private object[] OnEndGet(System.IAsyncResult result) {
            long Length = this.GetDefaultValueForInitialization<long>();
            string ToDir = this.GetDefaultValueForInitialization<string>();
            System.IO.Stream FileByteStream = this.GetDefaultValueForInitialization<System.IO.Stream>();
            string retVal = this.EndGet(result, out Length, out ToDir, out FileByteStream);
            return new object[] {
                    Length,
                    ToDir,
                    FileByteStream,
                    retVal};
        }
        
        private void OnGetCompleted(object state) {
            if ((this.GetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompleted(this, new GetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAsync(string FileName) {
            this.GetAsync(FileName, null);
        }
        
        public void GetAsync(string FileName, object userState) {
            if ((this.onBeginGetDelegate == null)) {
                this.onBeginGetDelegate = new BeginOperationDelegate(this.OnBeginGet);
            }
            if ((this.onEndGetDelegate == null)) {
                this.onEndGetDelegate = new EndOperationDelegate(this.OnEndGet);
            }
            if ((this.onGetCompletedDelegate == null)) {
                this.onGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompleted);
            }
            base.InvokeAsync(this.onBeginGetDelegate, new object[] {
                        FileName}, this.onEndGetDelegate, this.onGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Lcc.RFileClient.srvFileClient.RemoteFileCrc32 Lcc.RFileClient.srvFileClient.IFileTransferService.Put(Lcc.RFileClient.srvFileClient.RemoteFileInfo request) {
            return base.Channel.Put(request);
        }
        
        public string Put(string FileName, long Length, string ToDir, System.IO.Stream FileByteStream) {
            Lcc.RFileClient.srvFileClient.RemoteFileInfo inValue = new Lcc.RFileClient.srvFileClient.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.ToDir = ToDir;
            inValue.FileByteStream = FileByteStream;
            Lcc.RFileClient.srvFileClient.RemoteFileCrc32 retVal = ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).Put(inValue);
            return retVal.Crc32;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Lcc.RFileClient.srvFileClient.IFileTransferService.BeginPut(Lcc.RFileClient.srvFileClient.RemoteFileInfo request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPut(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPut(string FileName, long Length, string ToDir, System.IO.Stream FileByteStream, System.AsyncCallback callback, object asyncState) {
            Lcc.RFileClient.srvFileClient.RemoteFileInfo inValue = new Lcc.RFileClient.srvFileClient.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.ToDir = ToDir;
            inValue.FileByteStream = FileByteStream;
            return ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).BeginPut(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Lcc.RFileClient.srvFileClient.RemoteFileCrc32 Lcc.RFileClient.srvFileClient.IFileTransferService.EndPut(System.IAsyncResult result) {
            return base.Channel.EndPut(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndPut(System.IAsyncResult result) {
            Lcc.RFileClient.srvFileClient.RemoteFileCrc32 retVal = ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).EndPut(result);
            return retVal.Crc32;
        }
        
        private System.IAsyncResult OnBeginPut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            long Length = ((long)(inValues[1]));
            string ToDir = ((string)(inValues[2]));
            System.IO.Stream FileByteStream = ((System.IO.Stream)(inValues[3]));
            return this.BeginPut(FileName, Length, ToDir, FileByteStream, callback, asyncState);
        }
        
        private object[] OnEndPut(System.IAsyncResult result) {
            string retVal = this.EndPut(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPutCompleted(object state) {
            if ((this.PutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PutCompleted(this, new PutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PutAsync(string FileName, long Length, string ToDir, System.IO.Stream FileByteStream) {
            this.PutAsync(FileName, Length, ToDir, FileByteStream, null);
        }
        
        public void PutAsync(string FileName, long Length, string ToDir, System.IO.Stream FileByteStream, object userState) {
            if ((this.onBeginPutDelegate == null)) {
                this.onBeginPutDelegate = new BeginOperationDelegate(this.OnBeginPut);
            }
            if ((this.onEndPutDelegate == null)) {
                this.onEndPutDelegate = new EndOperationDelegate(this.OnEndPut);
            }
            if ((this.onPutCompletedDelegate == null)) {
                this.onPutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPutCompleted);
            }
            base.InvokeAsync(this.onBeginPutDelegate, new object[] {
                        FileName,
                        Length,
                        ToDir,
                        FileByteStream}, this.onEndPutDelegate, this.onPutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Lcc.RFileClient.srvFileClient.DelResponse Lcc.RFileClient.srvFileClient.IFileTransferService.Del(Lcc.RFileClient.srvFileClient.DownloadRequest request) {
            return base.Channel.Del(request);
        }
        
        public void Del(string FileName) {
            Lcc.RFileClient.srvFileClient.DownloadRequest inValue = new Lcc.RFileClient.srvFileClient.DownloadRequest();
            inValue.FileName = FileName;
            Lcc.RFileClient.srvFileClient.DelResponse retVal = ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).Del(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Lcc.RFileClient.srvFileClient.IFileTransferService.BeginDel(Lcc.RFileClient.srvFileClient.DownloadRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDel(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDel(string FileName, System.AsyncCallback callback, object asyncState) {
            Lcc.RFileClient.srvFileClient.DownloadRequest inValue = new Lcc.RFileClient.srvFileClient.DownloadRequest();
            inValue.FileName = FileName;
            return ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).BeginDel(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Lcc.RFileClient.srvFileClient.DelResponse Lcc.RFileClient.srvFileClient.IFileTransferService.EndDel(System.IAsyncResult result) {
            return base.Channel.EndDel(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDel(System.IAsyncResult result) {
            Lcc.RFileClient.srvFileClient.DelResponse retVal = ((Lcc.RFileClient.srvFileClient.IFileTransferService)(this)).EndDel(result);
        }
        
        private System.IAsyncResult OnBeginDel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            return this.BeginDel(FileName, callback, asyncState);
        }
        
        private object[] OnEndDel(System.IAsyncResult result) {
            this.EndDel(result);
            return null;
        }
        
        private void OnDelCompleted(object state) {
            if ((this.DelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelAsync(string FileName) {
            this.DelAsync(FileName, null);
        }
        
        public void DelAsync(string FileName, object userState) {
            if ((this.onBeginDelDelegate == null)) {
                this.onBeginDelDelegate = new BeginOperationDelegate(this.OnBeginDel);
            }
            if ((this.onEndDelDelegate == null)) {
                this.onEndDelDelegate = new EndOperationDelegate(this.OnEndDel);
            }
            if ((this.onDelCompletedDelegate == null)) {
                this.onDelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelCompleted);
            }
            base.InvokeAsync(this.onBeginDelDelegate, new object[] {
                        FileName}, this.onEndDelDelegate, this.onDelCompletedDelegate, userState);
        }
        
        public void ReName(string OldFileName, string NewFileName) {
            base.Channel.ReName(OldFileName, NewFileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReName(string OldFileName, string NewFileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReName(OldFileName, NewFileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReName(System.IAsyncResult result) {
            base.Channel.EndReName(result);
        }
        
        private System.IAsyncResult OnBeginReName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string OldFileName = ((string)(inValues[0]));
            string NewFileName = ((string)(inValues[1]));
            return this.BeginReName(OldFileName, NewFileName, callback, asyncState);
        }
        
        private object[] OnEndReName(System.IAsyncResult result) {
            this.EndReName(result);
            return null;
        }
        
        private void OnReNameCompleted(object state) {
            if ((this.ReNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReNameAsync(string OldFileName, string NewFileName) {
            this.ReNameAsync(OldFileName, NewFileName, null);
        }
        
        public void ReNameAsync(string OldFileName, string NewFileName, object userState) {
            if ((this.onBeginReNameDelegate == null)) {
                this.onBeginReNameDelegate = new BeginOperationDelegate(this.OnBeginReName);
            }
            if ((this.onEndReNameDelegate == null)) {
                this.onEndReNameDelegate = new EndOperationDelegate(this.OnEndReName);
            }
            if ((this.onReNameCompletedDelegate == null)) {
                this.onReNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReNameCompleted);
            }
            base.InvokeAsync(this.onBeginReNameDelegate, new object[] {
                        OldFileName,
                        NewFileName}, this.onEndReNameDelegate, this.onReNameCompletedDelegate, userState);
        }
        
        public Lcc.RFileClient.srvFileClient.StorageFileInfo[] List(string basePath) {
            return base.Channel.List(basePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginList(string basePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginList(basePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Lcc.RFileClient.srvFileClient.StorageFileInfo[] EndList(System.IAsyncResult result) {
            return base.Channel.EndList(result);
        }
        
        private System.IAsyncResult OnBeginList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string basePath = ((string)(inValues[0]));
            return this.BeginList(basePath, callback, asyncState);
        }
        
        private object[] OnEndList(System.IAsyncResult result) {
            Lcc.RFileClient.srvFileClient.StorageFileInfo[] retVal = this.EndList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListCompleted(object state) {
            if ((this.ListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListCompleted(this, new ListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListAsync(string basePath) {
            this.ListAsync(basePath, null);
        }
        
        public void ListAsync(string basePath, object userState) {
            if ((this.onBeginListDelegate == null)) {
                this.onBeginListDelegate = new BeginOperationDelegate(this.OnBeginList);
            }
            if ((this.onEndListDelegate == null)) {
                this.onEndListDelegate = new EndOperationDelegate(this.OnEndList);
            }
            if ((this.onListCompletedDelegate == null)) {
                this.onListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListCompleted);
            }
            base.InvokeAsync(this.onBeginListDelegate, new object[] {
                        basePath}, this.onEndListDelegate, this.onListCompletedDelegate, userState);
        }
        
        public string CRC32(string FileName) {
            return base.Channel.CRC32(FileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCRC32(string FileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCRC32(FileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCRC32(System.IAsyncResult result) {
            return base.Channel.EndCRC32(result);
        }
        
        private System.IAsyncResult OnBeginCRC32(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            return this.BeginCRC32(FileName, callback, asyncState);
        }
        
        private object[] OnEndCRC32(System.IAsyncResult result) {
            string retVal = this.EndCRC32(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCRC32Completed(object state) {
            if ((this.CRC32Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CRC32Completed(this, new CRC32CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CRC32Async(string FileName) {
            this.CRC32Async(FileName, null);
        }
        
        public void CRC32Async(string FileName, object userState) {
            if ((this.onBeginCRC32Delegate == null)) {
                this.onBeginCRC32Delegate = new BeginOperationDelegate(this.OnBeginCRC32);
            }
            if ((this.onEndCRC32Delegate == null)) {
                this.onEndCRC32Delegate = new EndOperationDelegate(this.OnEndCRC32);
            }
            if ((this.onCRC32CompletedDelegate == null)) {
                this.onCRC32CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCRC32Completed);
            }
            base.InvokeAsync(this.onBeginCRC32Delegate, new object[] {
                        FileName}, this.onEndCRC32Delegate, this.onCRC32CompletedDelegate, userState);
        }
        
        public Lcc.RFileClient.srvFileClient.StorageFileInfo[] UpdateFilesList(string basePath) {
            return base.Channel.UpdateFilesList(basePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateFilesList(string basePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateFilesList(basePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Lcc.RFileClient.srvFileClient.StorageFileInfo[] EndUpdateFilesList(System.IAsyncResult result) {
            return base.Channel.EndUpdateFilesList(result);
        }
        
        private System.IAsyncResult OnBeginUpdateFilesList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string basePath = ((string)(inValues[0]));
            return this.BeginUpdateFilesList(basePath, callback, asyncState);
        }
        
        private object[] OnEndUpdateFilesList(System.IAsyncResult result) {
            Lcc.RFileClient.srvFileClient.StorageFileInfo[] retVal = this.EndUpdateFilesList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateFilesListCompleted(object state) {
            if ((this.UpdateFilesListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateFilesListCompleted(this, new UpdateFilesListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateFilesListAsync(string basePath) {
            this.UpdateFilesListAsync(basePath, null);
        }
        
        public void UpdateFilesListAsync(string basePath, object userState) {
            if ((this.onBeginUpdateFilesListDelegate == null)) {
                this.onBeginUpdateFilesListDelegate = new BeginOperationDelegate(this.OnBeginUpdateFilesList);
            }
            if ((this.onEndUpdateFilesListDelegate == null)) {
                this.onEndUpdateFilesListDelegate = new EndOperationDelegate(this.OnEndUpdateFilesList);
            }
            if ((this.onUpdateFilesListCompletedDelegate == null)) {
                this.onUpdateFilesListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateFilesListCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateFilesListDelegate, new object[] {
                        basePath}, this.onEndUpdateFilesListDelegate, this.onUpdateFilesListCompletedDelegate, userState);
        }
        
        public Lcc.RFileClient.srvFileClient.TbDivClass[] GetDriveInfo() {
            return base.Channel.GetDriveInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDriveInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDriveInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Lcc.RFileClient.srvFileClient.TbDivClass[] EndGetDriveInfo(System.IAsyncResult result) {
            return base.Channel.EndGetDriveInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetDriveInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDriveInfo(callback, asyncState);
        }
        
        private object[] OnEndGetDriveInfo(System.IAsyncResult result) {
            Lcc.RFileClient.srvFileClient.TbDivClass[] retVal = this.EndGetDriveInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDriveInfoCompleted(object state) {
            if ((this.GetDriveInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDriveInfoCompleted(this, new GetDriveInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDriveInfoAsync() {
            this.GetDriveInfoAsync(null);
        }
        
        public void GetDriveInfoAsync(object userState) {
            if ((this.onBeginGetDriveInfoDelegate == null)) {
                this.onBeginGetDriveInfoDelegate = new BeginOperationDelegate(this.OnBeginGetDriveInfo);
            }
            if ((this.onEndGetDriveInfoDelegate == null)) {
                this.onEndGetDriveInfoDelegate = new EndOperationDelegate(this.OnEndGetDriveInfo);
            }
            if ((this.onGetDriveInfoCompletedDelegate == null)) {
                this.onGetDriveInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDriveInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetDriveInfoDelegate, null, this.onEndGetDriveInfoDelegate, this.onGetDriveInfoCompletedDelegate, userState);
        }
    }
}
